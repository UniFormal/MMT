%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  dependencies

\RequirePackage{hyperref}

% Attaching other objects to pdf object
% 1) /ActualText
% \RequirePackage{repltext} 
% this allows using \repltext{COPY}{TEXT} to attach COPY to TEXT in a way that copying TEXT actually copies COPY
% could be used to annotate MMT source to a formula, but few viewers support it
% 2) /AF (associated file)
% It's possible to associate arbitrary other data to arbitrary pdf objects, e.g., latex source or pdf renderings of other latex objects.
% see https://arxiv.org/pdf/1406.6126 for examples
% This does not appear to be implemented by any latex package and only barely by a few pdf viewers.

% \mmt@ifnonempty[b]{test}{a} = if (test == empty) a else b
\newcommand{\mmt@ifnonempty}[3][]{\def\@empty{}\def\@test{#2}\ifx\@test\@empty#1\else#3\fi}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% special characters

%% in latex the MMT delimiters are 'invalid' characters by default, these commands make them 'other'
% to write them, use ^^1c -- ^^1f
\catcode28=12
\catcode29=12
\catcode30=12
\catcode31=12

% surprisingly convoluted way to get the # character as a plain string that can be written to files
\newcommand{\mmt@secondoftwo}[2]{#2}
\newcommand{\@sharpchar}{\expandafter\mmt@secondoftwo\string\#}
\newcommand{\@underscorechar}{\expandafter\mmt@secondoftwo\string\_}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MMT context of free variables
% this could be used to maintain an MMT context inside LaTeX
%
%% this maintains a single stateful MMT context
%% entries are stored as \mmtcontext:1, \ldots, \mmtcontext:\mmtcontextlength (from least to most recently declared)
%
%% length of context
%\newcounter{mmtcontextlentgh}
%
%% stack operations (operating at the end of the list)
%\newcommand{\mmtcontext@push}[1]{\addtocounter{mmtcontextlentgh}{1}\expandafter\def\csname mmtcontext:\themmtcontextlentgh\endcsname{#1}}
%\newcommand{\mmtcontext@pop}{\expandafter\def\csname mmtcontext:\themmtcontextlentgh\endcsname\relax\addtocounter{mmtcontextlentgh}{-1}}
%\newcommand{\mmtcontext@get}[1]{\csname mmtcontext:#1\endcsname}
%\newcommand{\mmtcontext@top}{\mmtcontext@get{\themmtcontextlentgh}}
%
%% \begin{mmtcontext} \end{mmtcontext} automatically pops everything that was pushed in between
%% this is achieved by pushing an \mmtcontext@sep at the beginning
%\newcommand{\mmtcontext@sep}{|}
%\newcommand{\mmtcontext@popsection}{\ifx\mmtcontext@top\mmtcontext@sep\mmtcontext@pop\else\mmtcontext@pop\mmtcontext@popsection\fi}
%\newenvironment{mmtcontext}{\mmtcontext@push{\mmtcontext@sep}}{\mmtcontext@popsection}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% main code

% the  MMT file for main.tex is written to main.mmt
\newcommand{\mmt@mmtname}{\jobname.tex.mmt}

% the handle for the .mmt file
\newwrite\mmtfile
\immediate\openout\mmtfile=\mmt@mmtname
\AtEndDocument{
  %\immediate\write\lmtfile{^^1d}
  \immediate\closeout\mmtfile
}

% \mmt@...X is the name for the X-th MMT object
\newcounter{mmtobject}[subsection]
\newcommand{\mmt@current}{mmt@\thesubsection.\themmtobject}

% writes out an MMT object and executes \mmt@current
\newcommand{\fromMMT}[1]{
  \toMMT{constant \mmt@current\space = #1^^1e}
  \ifcsname\mmt@current\endcsname\else
  \PackageWarning{mmt}{undefined MMT object #1 with id \themmtobject}
  \fbox{MMT formula}
  %\fbox{#1}
  \fi
  \csname\mmt@current\endcsname % creates command as alias for \relax if it does not exist
  \stepcounter{mmtobject}
}

\newcommand{\toMMT}[1]{\mmt@ifnonempty{#1}{\immediate\write\mmtfile{#1}}}

\newcommand{\toMMT@ifnonempty}[3][]{\mmt@ifnonempty[\toMMT{#1}]{#2}{\toMMT{#3}}}

% abbreviations of \toMMT for common situations

\newcommand{\mmtnamespace}[1]{\toMMT{namespace #1 ^^1d}}
\newcommand{\mmtimport}[2]{\toMMT{import #1 #2^^1d}}

\newcommand{\mmtUnicodeAsAscii}{\toMMT{rule scala://parser.api.mmt.kwarc.info?UnicodeReplacer^^1d}}
\newcommand{\mmtUnicodeAsLatex}{\toMMT{rule scala://latex.mmt.kwarc.info?Common/LatexToUnicodeConverter^^1d}}

\newenvironment{mmttheory}[2]{\toMMT{theory #1}\toMMT@ifnonempty{#2}{ : #2} \toMMT{ = }}{\toMMT{^^1d}}
\newcommand{\mmtinclude}[1]{\toMMT{include #1 ^^1e}}
\newcommand{\mmtconstant}[4]{\toMMT{constant #1}\toMMT@ifnonempty{#2}{ : #2 ^^1f}\toMMT@ifnonempty{#3}{ = #3 ^^1f}\toMMT@ifnonempty{#4}{ \@sharpchar\space #4 ^^1f}\toMMT{^^1e}}

% context and variable declarations are just abbreviations for constants in nested theories; mmttheory should not be nested inside a mmtcontext
\newcounter{mmtcontext}
\newenvironment{mmtcontext}{\addtocounter{mmtcontext}{1}\begin{mmttheory}{CONTEXT\@underscorechar\themmtcontext}{}}{\end{mmttheory}}

\newcommand{\mmtvar}{\@ifstar\mmtvarStar\mmtvarNoStar}
\newcommand{\mmtvarNoStar}[2]{\mmtvar*{#1}{#2}$#1$}
\newcommand{\mmtvarStar}[2]{\mmtconstant{#1}{#2}{}{}}

%% "TERM" is an alias for \fromMMT{TERM}, thus yielding notation similar to Latex $TERM$
\catcode`"=13
\def"#1"{\ensuremath{\fromMMT{#1}}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% commands for semantically enriched latex, generated by MMT or used by macros that are generated by MMT

%% cross-referencing
 
%% \mmt@target{id}{text} defines text as the target of \mmt@ref{id}{...}
\newcommand{\mmt@target}[2]{\hyperdef{mmt}{#1}{#2}}
%% \mmt@ref{id}{text} makes text a reference to id
\newcommand{\mmt@ref}[2]{\hyperref{}{mmt}{#1}{\color{black}#2}}

%% pdf tooltips

\newbox\tempboxa
\setbox\tempboxa=\hbox{} 
\immediate\pdfxform\tempboxa 
\edef\emptyicon{\the\pdflastxform}

% \mmt@tooltip{text}{tooltip}
\newcommand{\mmt@tooltip}[2]{%
  \pdfstartlink user{%
    /Subtype /Text
    /Contents  (#2)
    /AP <<
      /N \emptyicon\space 0 R
    >>
  }%
  {#1}%
  \pdfendlink%
}

%% structure of MMT objects

% reference to a symbol, first argument is MMT URI
\newcommand{\mmt@symref}[2]{\mmt@tooltip{\href{http://localhost:8080?#1}{{\color{black}#2}}}{#1}}
% reference to a variable, first argument is de-Bruijn index
\newcommand{\mmt@varref}[2]{#2}
% a literal
\newcommand{\mmt@lit}[1]{#1}
% variable declaration: optional argument is the text rendering of the type if that type was inferred
\newcommand{\mmt@vardecl}[4][]{\mmt@ifnonempty[#2]{#1}{\mmt@tooltip{#2}{#1}}\mmt@ifnonempty[\mmt@ifnonempty{#3}{:#3}]{#1}{}\mmt@ifnonempty{#4}{=#4}}
% complex terms for which no notation is known
\newcommand{\mmt@complex}[4]{#1\mmt@ifnonempty{#2}{(#2)}\mmt@ifnonempty{#3}{[#3]}\mmt@ifnonempty{#4}{(#4)}}
% used to group sequence arguments/variables: fold{a}{b1,...,bn} = b1 a ... a bn
\newcommand{\mmt@fold}[2]{\def\@tmpop{\relax}\@for\@I:=#2\do{\@tmpop\@I\def\@tmpop{#1}}}
% wrapped around a complex MMT term, can be used for parsing the generated latex, e.g., by LaTeXML
\newcommand{\mmt@group}[1]{{#1}}
% an implicit argument
\newcommand{\mmt@implicit}[1]{#1}

% an error message in place of an ill-formed subobject
\newcommand{\mmt@error}[1]{\PackageError{mmttex}{#1}{#1}ERROR}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% package dependencies 

% should be redefined to the MathHub folder (unless that folder is in users' LaTeX includes anyway)
% if non-empty, it should end in /

\@ifundefined{mmttexmathhubroot}{\newcommand{\mmttexmathhubroot}{}}{}

\newcommand{\RequireMMTPackage}[1]{\RequirePackage{\mmttexmathhubroot#1}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% load the sty file generated by MMT (this is at the end because it uses the commands above)

%  MMT writes its result to job.tex.mmt.sty, which is imported here
% for publishing, simply keep the generated .sty file around - i.e., MMT is not needed to recompile an unchanged latex file
\IfFileExists{./\mmt@mmtname.sty}{\usepackage{\mmt@mmtname}}{}
