lineCharacter               ::=   [^\x0A\x0C\x0D]
stringCharacter             ::=   [^"\x0A\x0C\x0D]
lineWhiteSpaceCharacter     ::=   [ \t\x0B]
lineDelimiter               ::=   \x0D\x0A | [\x0A\x0C\x0D]
keyword                     ::=   "->" | "<-" | "_" | "=" | "type"| ":="
nonIdentifierPartCharacter  ::=   [\s\Q.:()[]{}%"\E]
identifierPartCharacter     ::=   [^\s\Q.:()[]{}%"\E]
identifierPart              ::=   identifierPartCharacter+
identifier                  ::=   identifierPart ("." identifierPart)*

singleLineComment           ::=   "%" ((lineWhiteSpaceCharacter | "%") lineCharacter*)? lineDelimiter

multiLineNonSemanticComment ::=   "%{" .* "}%"              TODO matching pairs of brackets inside?

commentShortForm            ::=   [^\s@] lineCharacter*
commentLongForm             ::=   (lineWhiteSpaceCharacter* ([^\s@] lineCharacter*)? lineDelimiter)*
                                  lineWhiteSpaceCharacter* ([^\s@] lineCharacter*)?
commentPropertyValue        ::=   ([^\s] (lineCharacter* ))?
commentProperty             ::=   "@" identifier lineWhiteSpaceCharacter+ commentPropertyValue
multiLineSemanticComment    ::=   "%*" lineWhiteSpaceCharacter* commentShortForm? 
                                  (lineDelimiter commentLongForm)? 
                                  (lineDelimiter commentProperty)* 
                                  [^\s]* "*%"


comment                     ::=   singleLineComment | multiLineNonSemanticComment 
                                  | multiLineSemanticComment
sc                          ::=   ([\s] | comment)+ 

readDeclaration             ::=   "%read" sc? """ stringCharacter* """ sc? "."
namespaceDeclaration        ::=   "%namespace" sc? """ stringCharacter* """ sc? "."
namespaceAliasDeclaration   ::=   "%namespace" sc 
                                  identifier sc "=" sc? 
                                  """ stringCharacter* """ sc? "."

termDeclaration             ::=   ("%abbrev" sc)? identifier
                                  (sc? ":" sc? term)?
                                  (sc "=" sc term)?
                                  sc? "."
term                        ::=   "type"
                                  | identifier
                                  | "(" sc? term sc? ")"
                                  | term sc "->" sc term
                                  | term sc "<-" sc term
                                  | "{" sc? identifierPart (sc? ":" sc? term)? sc? "}" sc? term
                                  | "[" sc? identifierPart (sc? ":" sc? term)? sc? "]" sc? term
                                  | term sc term
                                  | '(' sc? term sc? ":" sc? term sc? ')'
                                  | "_"

infixDeclaration            ::=   "%infix"
                                  sc ("none" | "left" | "right")
                                  sc number 
                                  sc identifier
                                  sc? "."
number                      ::=   "0" | ([\d&&[^0]] [\d]*)
prefixDeclaration           ::=   "%prefix" 
                                  sc number 
                                  sc identifier
                                  sc? "."
postfixDeclaration          ::=   "%postfix" 
                                  sc number 
                                  sc identifier
                                  sc? "."
fixityDeclaration           ::=   infixDeclaration | prefixDeclaration | postfixDeclaration

nameDeclaration             ::=   "%name" sc identifier sc identifierPart sc?.

theoryIncludeDeclaration    ::=   "%include" 
                                  sc identifier
                                  (sc? "%open" aliasList)?
                                  sc? "."
sigMetaDeclaration          ::=   "%meta" sc identifier sc? "."
ViewMetaDeclaration         ::=   "%meta" sc morphism sc? "."
viewIncludeDeclaration      ::=   "%include" sc morphism sc? "."
aliasList                   ::=   (sc aliasDeclaration)*
aliasDeclaration            ::=   identifier sc? ("%as" sc identifierPart)?

morphism                    ::=   identifier (sc identifier)*

constantAssignment          ::=   identifier sc? ":=" sc term sc? "."
structAssignment            ::=   "%struct" sc identifierPart sc? ":=" sc morphism sc? "."
linkBody                    ::=   "{"
                                  (sc? (linkMetaDeclaration | viewIncludeDeclaration
                                        | constantAssignment| structAssignment))*
                                  sc? "}"


simpleStructDeclaration     ::=   "%struct" (sc? "%implicit")? sc identifierPart 
                                  sc? ":" sc? identifier
                                  sc "=" sc? linkBody
                                  (sc? "%open" aliasList)?
                                  sc? "."

complexStructDeclaration    ::=   "%struct" (sc? "%implicit")? sc identifierPart 
                                  (sc? ":" sc? identifier)?
                                  sc "=" sc morphism
                                  (sc? "%open" aliasList)?
                                  sc? "."
                                  
emptyStructDeclaration      ::=   "%struct" (sc? "%implicit")? sc identifierPart 
                                  sc? ":" sc? identifier
                                  (sc? "%open" aliasList)?
                                  sc? "."

structDeclaration           ::=   simpleStructDeclaration | complexStructDeclaration | emptyStructDeclaration


signatureBody               ::=   "{"
                                  (sc? (sigMetaDeclaration | theoryIncludeDeclaration | structDeclaration | termDeclaration | fixityDeclaration |
                                        theory | view))*
                                  sc? "}"
theory                      ::=   "%sig" sc identifierPart sc "=" sc? signatureBody sc? "."
view                        ::=   "%view" (sc? "%implicit")? sc identifierPart sc? ":" sc? identifier sc "->" sc morphism sc "="
                                  ((sc? linkBody) | (sc morphism)) sc? "."
//TODO add internal views, with optional codomain

document                    ::=   (sc? (namespaceDeclaration | namespaceAliasDeclaration | readDeclaration |
                                        theory | view | 
                                        termDeclaration | nameDeclaration | fixityDeclaration))*  "%."?