%*
   Soundness of Propositional logic against an old model theory
   @author Fulya Horozal, Florian Rabe
   @license LATIN
*%

%namespace "http://cds.omdoc.org/logics/propositional/classic/soundness_old.elf".
%namespace pf  = "proof_theory.elf".
%namespace mod = "model_theory_old/mod.elf".
%namespace syntax-mod = "model_theory_old/pl-mod.elf".

%* Soundness of truth introduction *%
%view Truth : pf.Truth -> mod.Truth = {
  %include syntax-mod.Truth.
  trueI := true1.
}.

%* Soundness of falsity elimination *%
%view Falsity : pf.Falsity -> mod.Falsity = {
  %include syntax-mod.Falsity.
  falseE := [p : ded false' eq 1][A]
              (falseE' (contra false0 p)).
}.

%* Soundness of implication introduction and elimination *%
%view IMP : pf.IMP -> mod.IMP  = {
  %include syntax-mod.IMP.
  impI := [A][B][p: ded A eq 1 -> ded B eq 1] (
             imp1' 
               (orE (boole)
                  ([q : ded A eq 1] orIr (p q))
                  ([q : ded A eq 0] orIl q)
               )
          ).
  impE := [A][B][p : ded (A imp'' B) eq 1][q : ded A eq 1] (
                orE (boole)
                   ([r : ded B eq 1] r)
                   ([r : ded B eq 0] falseE' (contra (imp0' (andI q r)) p))
          ).
}.

%* Soundness of negation introducion and elimination *%
%view NEG : pf.NEG -> mod.NEG  = {
  %include syntax-mod.NEG.
  notI := [A][p : ded A eq 1 -> {B} ded B eq 1] (
             orE (boole)
                ([q : ded A eq 1] p q (not'' A))
                ([q : ded A eq 0] not1' q)
          ).
  notE := [A] ([q : ded (not'' A) eq 1] [p : ded A eq 1] [B] falseE' (contra (not0' p) q)).
}.

%* Soundness of conjunction introduction and eliminations *%
%view CONJ : pf.CONJ -> mod.CONJ = {
  %include syntax-mod.CONJ.
  andI := [A][B][p : ded A eq 1] [q : ded B eq 1] (
            and1' (andI p q)).
  andEl := [A][B][p : ded (A and'' B) eq 1] andEl (and1'' p).
  andEr := [A][B][p : ded (A and'' B) eq 1] andEr (and1'' p).
}.

%* Soundness of disjunction introductions and elimination *%
%view DISJ : pf.DISJ -> mod.DISJ = {
  %include syntax-mod.DISJ.
  orIl := [A][B][p : ded A eq 1] (or1' (orIl p)).
  orIr := [B][A][p : ded B eq 1] or1' (orIr p).
  orE  := [A][B][C][p : ded (A or'' B) eq 1] [q : ded A eq 1 -> ded C eq 1][r : ded B eq 1 -> ded C eq 1] (
            orE (boole) 
              ([s : ded A eq 1] q s)
              ([s : ded A eq 0] orE (boole)
                                ([t : ded B eq 1] r t)
                                ([t : ded B eq 0] falseE' (contra 
                                                          (or0' (andI s t)) 
                                                          p
                                                       )
                                )
              )
          ).   
}.

%* Soundness of tertium non datur rule *%
%view TND : pf.TND -> mod.PL = {  
  %include syntax-mod.NEG.
  %include syntax-mod.DISJ.
 
  tnd := [A] (orE (boole)
                    ([p : ded A eq 1] or1' (orIl p))
                    ([p : ded A eq 0] or1' (orIr (not1' p)))
         ).
}.

%* Soundness of intuitionistic propositional logic *%
%view IPL : pf.IPL -> mod.PL = {
  %include Truth.
  %include Falsity.
  %include NEG.
  %include IMP.
  %include CONJ.
  %include DISJ.
}.

%* Soundness of classical propositional logic *%
%view CPL : pf.CPL -> mod.PL = {
  %include IPL.
  %include TND.
}.