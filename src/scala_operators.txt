This is a reference to the abbreviations in the code.
They are useful when writing and reading code, but are hard to find in the API Documentation.

These consists of symbolic method names, implicit conversions, overloading, apply/unapply methods.
Many of them can be used for pattern-matching as well.

****** URIs ******

DPath ? LocalPath => MPath °
MPath ? LocalName => GlobalName °
TheoryObj % LocalName => GlobalName °
LocalPath / LocalPath => LocalPath °
LocalName / LocalName => LocalName °
° The second arguments can also be a string, which counts as path of length 1.

****** Objects ******

GlobalName(argument-sequence) => Term // application, yields an OMA

OMV / Term => Substitution // substituting for a variable °°
OMV % Term => Context      // typed variable °°
°° A string can be used instead of an OMV using import objects.Conversions._

Context ++ Context => Context // concatenation
Substitution ++ Substitution => Substitution  // concatenation
Substitution ^ Substitution => Substitution  // composition
Context.id => Substitution   // identity
Term ^ Substitution => Term  // substitution application, computed recursively
Both contexts and substitutions convert back and forth with lists using import objects.Conversions._

Term * Morph => Term   // morphism application, yields an OMM
Morph * Morph => Morph // composition
TheoryObj.id           // identity

****** Queries ******

+ Relation => Query  // forward step along a relation
- Relation => Query  // backward step along a relation
Query | Query => Query // alternative
Query * Query => Query // Concatenation
- Query // inverse

****** LF ******

See the apply/unapply methods of Pi, Lambda, Apply, ApplySpine, and Univ

****** Term Sequences ******

See the apply/unapply methods of Rep, Seq, Index, and Ellipsis