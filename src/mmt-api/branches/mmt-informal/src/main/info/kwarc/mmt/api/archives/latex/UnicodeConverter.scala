package info.kwarc.mmt.api.archives.latex

object UnicodeConverter {
val abbrevs =
"""jrightarrow|→
jleftarrow|←
jleftrightarrow|↔
jRightarrow|⇒
jLeftarrow|⇐
jLeftrightarrow|⇔
jlongrightarrow|⟶
jlongleftarrow|⟵
jlongleftrightarrow|⟷
jLongrightarrow|⟹
jLongleftrarrow|⟸
jLongleftrightarrow|⟺
juparrow|↑
jdownarrow|↓
jupdownarrow|↕
jUparrow|⇑
jDownarrow|⇓
jUpdownarrow|⇕
jmapsto|↦
jlongmapsto|⟼
jlolli|⊸
jhookrightarrow|↪
jhookleftarrow|↩
jrewrites|⟿
jcontra|↯
jast|∗
jstar|★
jcdot|⋅
jcirc|∘
jbullet|∙
jtimes|×
jpm|±
jmp|∓
jwedge|∧
jvee|∨
jcap|∩
jcup|∪
jsqcap|⊓
jsqcup|⊔
joplus|⊕
jominus|⊖
jotimes|⊗
joslash|⊘
joast|⊛
jocirc|⊚
jodot|⊙
jbigtimes|⨉
jbigcirc|◯
jbigwedge|⋀
jbigvee|⋁
jbigcap|⋂
jbigcup|⋃
jbigdiamond|◇
jbigoplus|⨁
jbigotimes|⨂
jsubset|⊂
jsupset|⊃
jsq|⊆‍
jsubseteq|⊆‍
jsupseteq|⊇
jnsubset|⊄
jnsupset|⊅
jnsubseteq|⊈
jnsupseteq|⊉
jsubsetneq|⊊
jsupsetneq|⊋
jleq|≤
jgeq|≥
jll|≪
jgg|≫
jnleq|≨
jngeq|≩
jsqsubset|⊏
jsqsupset|⊐
jsubseteq|⊑
jsupseteq|⊒
jin|‍∈
jnin|∉
jni|∋
jnni|∌
jneq|≠
jdoteq|≐
jeq|⚌
jequiv|≡
jnequiv|≢
jsim|∼
jsimeq|≃
jnsimeq|≄
jcong|≅
jncong|≇
japprox|≈
jnapprox|≉
japproxeq|≊
jtriangleright|▷
jtriangleleft|◁
jblacktriangleright|▶
jblacktriangleleft|◀
jder|⊢
jvdash|⊢
jdashv|⊣
jmodels|⊧
jtop|⊤
jbot|⊥
jneg|¬
jforall|∀
jexists|∃
jnexists|∄
jbox|□
jsquare|□
jdiamond|⋄
jes|∅
jemptyset|∅
jaleph|א
jinfty|∞
jsum|∑
jprod|∏
jcoprod|∐
jamalg|∐
jcomp|∁
jcomplement|∁
jsm|∖
jsetminus|∖
jcolon|∶
jcoloneq|≔
jlangle|⟨
jrangle|⟩
jllangle|⟪
jrrangle|⟫
jllbracket|⟦
jrrbracket|⟧
jlceil|⌈
jrceil|⌉
jlfloor|⌊
jrfloor|⌋
julcorner|⌜
jurcorner|⌝
jllcorner|⌞
jlrcorner|⌟
jN|ℕ
jZ|ℤ
jQ|ℚ
jR|ℝ
jC|ℂ
jB|ℬ
jAlpha|Α
jBeta|Β
jGamma|Γ
jDelta|Δ
jEpsilon|Ε
jZeta|Ζ
jEta|Η
jTheta|Θ
jIota|Ι
jKappa|Κ
jLambda|Λ
jMu|Μ
jNu|Ν
jXi|Ξ
JOmikron|Ο
jPi|Π
jRho|Ρ
jSigma|Σ
jTau|Τ
jUpsilon|Υ
jPhi|Φ
jChi|Χ
jPsi|Ψ
jOmega|Ω
jalpha|α
jbeta|β
jgamma|γ
jdelta|δ
jepsilon|ε
jzeta|ζ
jeta|η
jtheta|ϑ
jiota|ι
jkappa|κ
jlambda|λ
jmu|μ
jnu|ν
jxi|ξ
jomikron|ο
jpi|π
jrho|ρ
jsigma|σ
jtau|τ
jupsilon|υ
jphi|φ
jchi|χ
jpsi|ψ
jomega|ω
"""
   var maps : List[(Char, String)] = Nil
   var mapsRaw : List[(Char, String)] = Nil
   def init {
      abbrevs.split("\\s+").foreach {s =>
         if (s != "") {
            val parts = s.split("\\|").toList
            val latex::unicode::Nil = parts
            maps    ::= (unicode(0),  "\\" + latex.substring(1) + " ")
            mapsRaw ::= (unicode(0),  latex.substring(1))
         }
      }
   }
   init
}