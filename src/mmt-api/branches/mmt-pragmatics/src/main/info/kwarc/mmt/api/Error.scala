package info.kwarc.mmt.api

/** The superclass of all Errors generated by MMT
 * @param msg the error message 
 */
abstract class Error(val shortMsg : String) extends java.lang.Throwable(shortMsg) {
   private var causedBy: Option[Error] = None
   def setCausedBy(e: Error): Error = {causedBy = Some(e); this}
   def getCausedBy : Option[Error] = causedBy
   def msg : String = shortMsg + "\n" + causedBy.map(_.msg).getOrElse("")
}

/** errors that occur during parsing */
case class ParseError(s : String) extends Error("parse error: " + s)
/** errors that occur when adding a knowledge item */
case class AddError(s : String) extends Error("add error: " + s)
/** errors that occur when deleting a knowledge item */
case class DeleteError(s : String) extends Error("delete error: " + s)
/** errors that occur when retrieving a knowledge item */
case class GetError(s : String) extends Error("get error: " + s)
/** errors that occur when checking a knowledge item (generated by the Checker classes) */
case class Invalid(s : String) extends Error("validation error: " + s)      
/** errors that occur when presenting a knowledge item */
case class PresentationError(s : String) extends Error(s)
/** errors that are not supposed to occur, e.g., when input violates the precondition of a method */
case class ImplementationError(s : String) extends Error("implementation error: " + s)      

// are these even used?
case class ObjError(s : String) extends Error(s)
case class LookupError(name : String) extends Error("variable " + name + " not declared in context")
case class SubstitutionUndefined(name: String) extends Error("Substitution undefined at " + name)
