package info.kwarc.mmt.api
import info.kwarc.mmt.api.parser.SourceRef

/** The superclass of all Errors generated by MMT
 * @param msg the error message 
 */
abstract class Error(val shortMsg : String) extends java.lang.Throwable(shortMsg) {
   private var causedBy: Option[java.lang.Throwable] = None
   def setCausedBy(e: java.lang.Throwable): Error = {causedBy = Some(e); this}
   def getCausedBy : Option[java.lang.Throwable] = causedBy
   def msg : String = {
      val causedByMsg = causedBy match {
        case None => ""
        case Some(e: Error) => "\ncaused by\n" + e.msg
        case Some(e) => "\ncaused by\n" + e.getMessage + e.getStackTrace.map(_.toString).mkString("\n","\n","")
      }
      shortMsg + "\n" + stackTrace + causedByMsg
   }
   def stackTrace : String = getStackTrace.map(_.toString).mkString("","\n","")
   override def toString = shortMsg
}

/** syntax errors in source files */
case class SourceError(
    origin: String, ref: SourceRef, mainMessage: String, extraMessages: List[String] = Nil,
    warning: Boolean = false, fatal: Boolean = false
 ) extends Error(origin + ": source error at " + ref.region.start.twoDimStringFromOne + ": " + mainMessage) {
    override def getMessage = mainMessage + extraMessages.mkString("\n","\n","\n")
}
/** errors that occur during compiling */
object CompilerError {
  def apply(ref: SourceRef, messageList : List[String], warning: Boolean) =
      SourceError("compiler", ref, messageList.head, messageList.tail, warning)
}
/** errors that occur during parsing */
case class ParseError(s : String) extends Error("parse error: " + s)
/** errors that occur when adding a knowledge item */
case class AddError(s : String) extends Error("add error: " + s)
/** errors that occur when updating a knowledge item */
case class UpdateError(s : String) extends Error("update error: " + s)
/** errors that occur when deleting a knowledge item */
case class DeleteError(s : String) extends Error("delete error: " + s)
/** errors that occur when retrieving a knowledge item */
case class GetError(s : String) extends Error("get error: " + s)
/** errors that occur when the Backend cannot find an applicable resource */
case class BackendError(p : Path) extends Error("Cannot find resource " + p.toString)
/** errors that occur when checking a knowledge item (generated by the Checker classes) */
abstract class Invalid(s: String) extends Error(s)
/** errors that occur when structural elements are invalide */
case class InvalidElement(elem: StructuralElement, s : String, causedBy: Error = null) extends Invalid("invalid element: " + s + ": " + elem.path.toPath) {
    if (causedBy != null) setCausedBy(causedBy)
}    
/** errors that occur when structural elements are invalide */
case class InvalidObject(obj: objects.Obj, s : String) extends Invalid("invalid object: " + s + ": " + obj)
/** errors that occur when presenting a knowledge item */
case class PresentationError(s : String) extends Error(s)
/** errors that occur when registering extensions  */
case class ExtensionError(s : String) extends Error(s)
/** errors that are not supposed to occur, e.g., when input violates the precondition of a method */
case class ImplementationError(s : String) extends Error("implementation error: " + s)      
/** errors that occur during substitution with name of the variable for which the substitution is defined */
case class SubstitutionUndefined(name: LocalName, m: String) extends Error("Substitution undefined at " + name.toString + "; " + m)

case class LookupError(name : LocalName) extends Error("variable " + name.toString + " not declared in context")
