dist: trusty
language: scala
scala: 2.11.12

# define 'stages' of our build process
stages:
  - name: Build.sbt
  - name: CodeCheck
  - name: DeployCheck
  - name: Test
  - name: Deploy
    if: branch = master

# define several 'jobs' for each stage
# within a single stage jobs are run in parallel, each in their own environment
# HACK: We use the INFO variable to display some information in the Travis UI
jobs:
  include:
    # check that we can load build.sbt loads
    - stage: Build.sbt
      script: cd src && (cat /dev/null | sbt exit)
      env: INFO='Check that build.sbt loads'

    # check that the sources compile, print all the scalastyle warnings
    - stage: CodeCheck
      script: cd src && (cat /dev/null | sbt compile)
      env: INFO='Check that the code compiles'
    - script: cd src && (cat /dev/null | sbt scalastyle)
      env: INFO='Print scalastyle violations'

    # check that the 'apidoc', 'deploy' and 'deployFull' targets work
    - stage: DeployCheck
      script: cd src && (cat /dev/null | sbt deploy) && [[ -f "../deploy/mmt.jar" ]]
      env: INFO='Check mmt.jar generation using `sbt deploy`'
    - script: cd src && (cat /dev/null | sbt deployFull) && [[ -f "../deploy/mmt.jar" ]]
      env: INFO='Check mmt.jar generation using `sbt deployFull`'
    - script: cd src && (cat /dev/null | sbt apidoc) && [[ -d "../apidoc" ]]
      env: INFO='Check that apidoc generation works'

    # check that our own tests work
    # TODO: Split into unit tests (partial) and test/general tests
    - stage: Test
      script: cd src && (cat /dev/null | sbt test)
      env: INFO='Run MMT Tests'

    # deploy the api documentation
    - stage: Deploy
      script: bash scripts/travis/deploy_doc.sh
      env: INFO='Auto-deploy API documentation'

env:
  global:
  - ENCRYPTION_LABEL: "25a07036478c"
  - COMMIT_AUTHOR_EMAIL: "tkw01536@gmail.com"
