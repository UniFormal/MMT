
# +===============================================================+
# |THIS FILE HAS BEEN AUTO-GENERATED USING `sbt genTravisYML`     |
# |ANY CHANGES WILL BE OVERWRITTEN                                |
# +===============================================================+

# these values were configured in src/project/prefix.travis.yml

# configuration for deploy
env:
  global:
  - ENCRYPTION_LABEL: "25a07036478c"
  - COMMIT_AUTHOR_EMAIL: "45969094+kwarcbot@users.noreply.github.com"
  - JAVA_OPTS: "-Xmx8192m"

# use java, and install sbt on OS X
language: java


# meta -- email notification for builds
notifications:
  email:
    on_success: change
    on_failure: always
    on_error: always
    on_start: never
    on_cancel: never


# speed up cloning of the git repository
# we only need a clone depth of '1'
git:
  depth: 1

# cache the dependencies for sbt so that we do not need to re-download them all the time
# adapted from https://www.scala-sbt.org/0.13/docs/Travis-CI-with-sbt.html
cache:
  directories:
    - $HOME/.ivy2/cache
    - $HOME/.sbt

before_cache:
  # Cleanup the cached directories to avoid unnecessary cache updates
  - find $HOME/.ivy2/cache -name "ivydata-*.properties" -print -delete
  - find $HOME/.sbt        -name "*.lock"               -print -delete

# +===============================================================+
# |Anything below this line has been generated automatically      |
# |from src/travis.sbt.                                           |
# +===============================================================+
before_install:
  - 'if [[ "$TRAVIS_OS_NAME" = "osx" ]]; then brew update; brew install sbt; fi'
before_script:
  - "export TEST_USE_BRANCH=$TRAVIS_BRANCH; echo TEST_USE_BRANCH=;"
install:
  - "cd src && (cat /dev/null | sbt ++2.12.9 update) && cd .."
jobs:
  include:
    # check that 'sbt genTravisYML' has been run
    - dist: bionic
      env:
        - "INFO='Check that `sbt genTravisYML` has been run'"
        - 'SBT_VERSION_CMD="^validate"'
      jdk: openjdk14
      language: scala
      scala: "2.12.9"
      script:
        - "cd src && (cat /dev/null | sbt ++2.12.9 genTravisYML) && cd .."
        - '(git diff --quiet --exit-code ".travis.yml")'
      stage: SelfCheck
    # Check that our tests run and the code compiles
    - dist: bionic
      env:
        - "INFO='Check that unit tests run'"
        - 'SBT_VERSION_CMD="^validate"'
      jdk: openjdk14
      language: scala
      scala: "2.12.9"
      script:
        - "cd src && (cat /dev/null | sbt ++2.12.9 test) && cd .."
      stage: CompileAndCheck
    - dist: bionic
      env:
        - "INFO='Check mmt.jar generation and integration tests'"
        - 'SBT_VERSION_CMD="^validate"'
      jdk: openjdk14
      language: scala
      scala: "2.12.9"
      script:
        - "cd src && (cat /dev/null | sbt ++2.12.9 deploy) && cd .."
        - '[[ -f "deploy/mmt.jar" ]]'
        - "java -cp deploy/mmt.jar info.kwarc.mmt.test.TestRunner"
    # check that the 'apidoc' and 'deployLFCatalog' targets work
    - dist: bionic
      env:
        - "INFO='Check lfcatalog.jar generation using `sbt deployLFCatalog`'"
        - 'SBT_VERSION_CMD="^validate"'
      jdk: openjdk14
      language: scala
      scala: "2.12.9"
      script:
        - "cd src && (cat /dev/null | sbt ++2.12.9 deployLFCatalog) && cd .."
        - '[[ -f "deploy/lfcatalog/lfcatalog.jar" ]]'
      stage: DeployCheck
    - dist: bionic
      env:
        - "INFO='Check that apidoc generation works'"
        - 'SBT_VERSION_CMD="^validate"'
      jdk: openjdk14
      language: scala
      scala: "2.12.9"
      script:
        - "cd src && (cat /dev/null | sbt ++2.12.9 apidoc) && cd .."
        - '[[ -d "apidoc" ]]'
    # deploy the api documentation
    - dist: bionic
      env:
        - "INFO='Auto-deploy API documentation'"
        - 'SBT_VERSION_CMD="^validate"'
      jdk: openjdk14
      language: scala
      scala: "2.12.9"
      script:
        - "bash scripts/travis/deploy_doc.sh"
      stage: deploy
stages:
  - name: SelfCheck
  - name: CompileAndCheck
  - name: DeployCheck
  - if: "branch = master"
    name: deploy